We have to find k ,  ==> k is nothing but banananas eatten by per hour  k -> bananans/hr

for example arr[] = [3,6,7,11], hours = 8

if k = 1, 3 + 6 + 7 + 11 ==> sum>hours 

if k = 2, 2 + 3 + 4 + 6 

if k = 3, 1 + 2 + 3 + 4

if k =4, 1 + 2 + 2 + 3   .... and so on

TC : n * log(max(piles[i])

class Solution {
public:

    int maxi(vector<int>&piles)
    {
        int n = piles.size();
        int maxEle = INT_MIN;
        for(int i=0;i<n;i++) maxEle = max(maxEle,piles[i]);
        return maxEle;
    }
    
    long long f(vector<int>&piles,int mid)
    {
        long long totalHours = 0;
        int n = piles.size();
        for(int i=0;i<n;i++)
        {
            totalHours += ceil((double)piles[i] / (double)mid);
        }

        return totalHours;

    }
    

    int minEatingSpeed(vector<int>& piles, int h) {
        
        int n = piles.size();
        
        int l = 1,r = maxi(piles);

        int ans = INT_MAX;

        while(l<=r)
        {
            int mid = (l+r)/2;
            long long temp = f(piles,mid);
        
            if(temp<=h) 
            {
                ans = mid;
                r = mid - 1;
            }

            else l = mid + 1;


        }

        return ans;
    }
};


